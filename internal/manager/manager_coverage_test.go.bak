package manager

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/taokim/muno/internal/config"
	"github.com/taokim/muno/internal/mocks"
)

// SetupTestManager creates a fully initialized manager for testing
func SetupTestManager(t *testing.T) (*Manager, string) {
	tmpDir := t.TempDir()
	
	// Create initial config
	cfg := &config.ConfigTree{
		Workspace: config.WorkspaceTree{
			Name:     "test-workspace",
			ReposDir: "repos",
		},
		Nodes: []config.NodeDefinition{},
	}
	
	configPath := filepath.Join(tmpDir, "muno.yaml")
	err := cfg.Save(configPath)
	require.NoError(t, err)
	
	// Create repos directory
	reposDir := filepath.Join(tmpDir, "repos")
	err = os.MkdirAll(reposDir, 0755)
	require.NoError(t, err)
	
	// Create manager
	mgr, err := NewManager(tmpDir, nil)
	require.NoError(t, err)
	
	return mgr, tmpDir
}

func TestManager_Status(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Should not panic
	mgr.ShowStatus()
	// No assertion needed, just test it doesn't panic
}

func TestManager_ShowTree(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Should not panic
	mgr.ShowTree(2)
	// No assertion needed, just test it doesn't panic
}

func TestManager_InitWorkspace(t *testing.T) {
	tmpDir := t.TempDir()
	mgr, err := NewManager(tmpDir, nil)
	require.NoError(t, err)
	
	err = mgr.InitWorkspace("test-project", false)
	assert.NoError(t, err)
	
	// Check config was created
	configPath := filepath.Join(tmpDir, "muno.yaml")
	assert.FileExists(t, configPath)
}

func TestManager_AddRepo_Coverage(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Test adding a repository
	err := mgr.AddRepoSimple("https://github.com/test/repo.git", "test-repo", true)
	assert.NoError(t, err)
	
	// Test adding duplicate
	err = mgr.AddRepoSimple("https://github.com/test/repo.git", "test-repo", true)
	assert.Error(t, err, "should error on duplicate")
}

func TestManager_RemoveRepo(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Add a repo first
	err := mgr.AddRepoSimple("https://github.com/test/repo.git", "test-repo", true)
	require.NoError(t, err)
	
	// Remove it
	err = mgr.RemoveNode("/test-repo")
	assert.NoError(t, err)
	
	// Try to remove non-existent
	err = mgr.RemoveNode("/non-existent")
	assert.Error(t, err)
}

func TestManager_UseNode_Coverage(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Add a repo
	err := mgr.AddRepoSimple("https://github.com/test/repo.git", "test-repo", true)
	require.NoError(t, err)
	
	// Navigate to it
	err = mgr.UseNode("/test-repo")
	assert.NoError(t, err)
	
	// Try to navigate to non-existent
	err = mgr.UseNode("/non-existent")
	assert.Error(t, err)
}

func TestManager_ListNodes(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Add some repos
	mgr.AddRepoSimple("https://github.com/test/repo1.git", "repo1", true)
	mgr.AddRepoSimple("https://github.com/test/repo2.git", "repo2", false)
	
	// List should not panic
	err := mgr.ListNodes("")
	assert.NoError(t, err)
}

func TestManager_ShowCurrent(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Should not panic
	mgr.ShowCurrent()
	// No assertion needed, just test it doesn't panic
}

func TestManager_CloneRepos(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Create a mock git that simulates successful cloning
	mockGit := &mocks.MockGit{
		CloneFunc: func(url, path string) error {
			// Create .git directory to simulate clone
			return os.MkdirAll(filepath.Join(path, ".git"), 0755)
		},
		IsRepoFunc: func(path string) bool {
			_, err := os.Stat(filepath.Join(path, ".git"))
			return err == nil
		},
	}
	mgr.GitCmd = mockGit
	
	// Add a lazy repo
	err := mgr.AddRepoSimple("https://github.com/test/lazy.git", "lazy-repo", true)
	require.NoError(t, err)
	
	// Clone repos (should clone the lazy one)
	err = mgr.CloneRepos("", false)
	assert.NoError(t, err)
}


func TestManager_PullNode(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Add a repo
	mgr.AddRepoSimple("https://github.com/test/repo.git", "test-repo", false)
	
	// Pull should work
	err := mgr.PullNode("", false)
	assert.NoError(t, err)
}

func TestManager_CommitNode(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Commit should work
	err := mgr.CommitNode("", "test commit", false)
	assert.NoError(t, err)
}

func TestManager_PushNode(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// Push should work
	err := mgr.PushNode("", false)
	assert.NoError(t, err)
}

func TestManager_StartClaude(t *testing.T) {
	mgr, _ := SetupTestManager(t)
	
	// This might fail on some systems, so we just test it doesn't panic
	// We can't really test the actual Claude startup
	_ = mgr.StartClaude("")
}

func TestManager_EdgeCases(t *testing.T) {
	t.Run("Manager with invalid path", func(t *testing.T) {
		mgr, err := NewManager("/non/existent/path", nil)
		assert.NoError(t, err) // Manager creation shouldn't fail
		assert.NotNil(t, mgr)
	})
	
	t.Run("SmartInit with Force option", func(t *testing.T) {
		mgr, tmpDir := SetupTestManager(t)
		
		// Should not error with Force option
		opts := InitOptions{
			Force:          true,
			NonInteractive: true,
		}
		err := mgr.SmartInitWorkspace("test", opts)
		assert.NoError(t, err)
		
		// Check files were created
		assert.FileExists(t, filepath.Join(tmpDir, "muno.yaml"))
		assert.FileExists(t, filepath.Join(tmpDir, "CLAUDE.md"))
	})
	
	t.Run("findGitNodes error handling", func(t *testing.T) {
		mgr, tmpDir := SetupTestManager(t)
		
		// Create a directory that will cause walk errors
		restrictedDir := filepath.Join(tmpDir, "restricted")
		os.MkdirAll(restrictedDir, 0000) // No permissions
		defer os.Chmod(restrictedDir, 0755) // Cleanup
		
		// Should handle walk errors gracefully
		repos, err := mgr.findGitNodesWithReposDir(tmpDir, "repos")
		assert.NoError(t, err) // Errors are ignored in walk
		assert.NotNil(t, repos)
	})
}

func TestGitRepoInfo(t *testing.T) {
	// Test the GitRepoInfo struct usage
	info := GitRepoInfo{
		Path:      "/test/path",
		RemoteURL: "https://github.com/test/repo.git",
		Branch:    "main",
	}
	
	assert.Equal(t, "/test/path", info.Path)
	assert.Equal(t, "https://github.com/test/repo.git", info.RemoteURL)
	assert.Equal(t, "main", info.Branch)
}

func TestInitOptions(t *testing.T) {
	// Test the InitOptions struct usage
	opts := InitOptions{
		Force:          true,
		NonInteractive: false,
	}
	
	assert.True(t, opts.Force)
	assert.False(t, opts.NonInteractive)
}

